DONT BUILD THIS CODE IN
This file is only a repository for 
display methods for the courses screen	
	
	def get_course_description(self):
		
		headers = {'Accept': 'application/json; indent=4'}
		
		#IP of the Django server on AWS
		#Note: this will be a global variable eventually
		url_request_IP_string = "http://34.207.67.202:8080/"
		
		#Name of the procedure we're calling (from the list 
		# of registered URLs)
		#Note: this will be a global variable eventually
		url_request_RPC_name_string = 
			"course_description/get_course_description/?search_id="
		
		#Name of the course being searched. 
		#Note: this will be a local variable to this class and will
		# be populated by using the textIn.text property, which is
		# the value the user puts into the TextInput box on the screen.
		# For now, use "SSW555" because it gives good returns
		course_search_string = "SSW555"
				
		#These two lines construct the URLRequest object and string
		# out of the three variables above, calls the server with 
		# that string, and gets the result in the req variable
		req = UrlRequest(
			url_request_IP_string + 
			url_request_RPC_name_string +
			course_search_string, req_headers=headers)
		req.wait()
				
		#Since right now there is only one object coming back, 
		# this is hardcode indexed, but eventually we'll probably
		# want this to be dynamic. 
		res = req.result[0]
		
		#These two lines just print out the raw returns from above. 
		# You can use these results to populate widgets on screen 
		# the same way that I did with the other code I sent from
		# my sandbox the other day. I tested this code and it works, 
		# but in order to make it work, you need to go to the .kv file
		# and either add a button or change one of the existing 
		# button's on_press attribute to 
		# "on_press: root.get_course_description()". Remember that
		# this function is scoped locally to the class you're working
		# with so you'll have to add this function within whatever
		# class you want to use in this file and add change the 
		# on_press attribute within that same class in the .kv
		# file. Otherwise, the app won't know what class you're 
		# talking about and it will fail out. This whole thing is 
		# pretty fragile right now, but if you do these things
		# in that order, it will work. I've left the baseline
		# code for displaying a course description in comments below
		# so you can play with actually displaying your results.
		print(req)
		print(res)
		
		
		# #print req.result
		# layout = BoxLayout(orientation='vertical')
		# course_id = res['course_id']
		# course_name = res['course_name']
		# course_description = res['course_description']
		# id_label = Label(text=course_id, halign='left', valign='middle')
		# name_label = Label(text=course_name)
		# description_label = Label(text=course_description, size_hint=(1,None))
		# description_label.bind(
			# width=lambda*x:description_label.setter('text_size')(description_label,(description_label.width,None)),
			# texture_size=lambda*x:description_label.setter('height')(description_label,description_label.texture_size[1]))
		# layout.add_widget(id_label)
		# layout.add_widget(name_label)
		# layout.add_widget(description_label)
		# self.ids.course_description_section.clear_widgets()
		# self.ids.course_description_section.add_widget(layout)	



Original Course Description Display code
class CourseDescriptionScreen(Screen):
	
	def get_course_description(self):
		headers = {'Accept': 'application/json; indent=4'}
		#This is how you grab the text to perform the search and retrievel
	 	#searched = self.ids.course_id.text
		req = UrlRequest('http://127.0.0.1:8000/course_description/', req_headers=headers)
		req.wait()
		res = req.result[0]
		#print req.result
		layout = BoxLayout(orientation='vertical')
		course_id = res['course_id']
		course_name = res['course_name']
		course_description = res['course_description']
		id_label = Label(text=course_id, halign='left', valign='middle')
		name_label = Label(text=course_name)
		description_label = Label(text=course_description, size_hint=(1,None))
		description_label.bind(
			width=lambda*x:description_label.setter('text_size')(description_label,(description_label.width,None)),
			texture_size=lambda*x:description_label.setter('height')(description_label,description_label.texture_size[1]))
		layout.add_widget(id_label)
		layout.add_widget(name_label)
		layout.add_widget(description_label)
		self.ids.course_description_section.clear_widgets()
		self.ids.course_description_section.add_widget(layout)		